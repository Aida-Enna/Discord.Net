using System;
using System.Text.Json.Serialization;

namespace Discord.Net.Models
{
    /// <summary>
    /// Represents a discord message object.
    /// </summary>
    /// <remarks>
    /// <see href="https://discord.com/developers/docs/resources/channel#message-object-message-structure"/>
    /// </remarks>
    public record Message
    {
        /// <summary>
        /// Maximum length of the message content.
        /// </summary>
        public const int MaxContentLength = 2000;

        /// <summary>
        /// Maximum amount of embeds.
        /// </summary>
        public const int MaxEmbeds = 10;

        /// <summary>
        /// Minimum amount of messages to bulk delete.
        /// </summary>
        public const int MinBulkDeleteAmount = 2;

        /// <summary>
        /// Maximum amount of messages to bulk delete.
        /// </summary>
        public const int MaxBulkDeleteAmount = 100;

        /// <summary>
        /// Id of the <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("id")]
        public Snowflake Id { get; init; }

        /// <summary>
        /// Id of the <see cref="Channel"/> the <see cref="Message"/> was sent in.
        /// </summary>
        [JsonPropertyName("channel_id")]
        public Snowflake ChannelId { get; init; }

        /// <summary>
        /// Id of the <see cref="Guild"/> the message was sent in.
        /// </summary>
        [JsonPropertyName("guild_id")]
        public Optional<Snowflake> GuildId { get; init; }

        /// <summary>
        /// The author of this message (not guaranteed to be a valid user, but a webhook).
        /// </summary>
        [JsonPropertyName("author")]
        public User? Author { get; init; } // Required property candidate

        /// <summary>
        /// <see cref="GuildMember"/> properties for this <see cref="Message"/>'s author.
        /// </summary>
        [JsonPropertyName("member")]
        public Optional<GuildMember> Member { get; init; }

        /// <summary>
        /// Contents of the <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get; init; } // Required property candidate

        /// <summary>
        /// When this <see cref="Message"/> was sent.
        /// </summary>
        [JsonPropertyName("timestamp")]
        public DateTimeOffset Timestamp { get; init; }

        /// <summary>
        /// When this <see cref="Message"/> was edited (or null if never).
        /// </summary>
        [JsonPropertyName("edited_timestamp")]
        public DateTimeOffset? EditedTimestamp { get; init; }

        /// <summary>
        /// Whether this was a TTS <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("tts")]
        public bool Tts { get; init; }

        /// <summary>
        /// Whether this <see cref="Message"/> mentions everyone.
        /// </summary>
        [JsonPropertyName("mention_everyone")]
        public bool MentionEveryone { get; init; }

        /// <summary>
        /// Users specifically mentioned in the <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("mentions")]
        public UserMention[]? Mentions { get; init; } // Required property candidate

        /// <summary>
        /// <see cref="Role"/>s specifically mentioned in this <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("mention_roles")]
        public Snowflake[]? MentionRoles { get; init; } // Required property candidate

        /// <summary>
        /// <see cref="Channel"/>s specifically mentioned in this <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("mention_channels")]
        public Optional<ChannelMention[]> MentionChannels { get; init; }

        /// <summary>
        /// Any attached files.
        /// </summary>
        [JsonPropertyName("attachments")]
        public Attachment[]? Attachments { get; init; } // Required property candidate

        /// <summary>
        /// Any embedded content.
        /// </summary>
        [JsonPropertyName("embeds")]
        public Embed[]? Embeds { get; init; } // Required property candidate

        /// <summary>
        /// <see cref="Reaction"/>s to the <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("reactions")]
        public Optional<Reaction[]> Reactions { get; init; }

        /// <summary>
        /// Used for validating a <see cref="Message"/> was sent.
        /// </summary>
        [JsonPropertyName("nonce")]
        public Optional<string> Nonce { get; init; }

        /// <summary>
        /// Whether this <see cref="Message"/> is pinned.
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool Pinned { get; init; }

        /// <summary>
        /// If the <see cref="Message"/> is generated by a <see cref="Webhook"/>,
        /// this is the <see cref="Webhook"/>'s id.
        /// </summary>
        [JsonPropertyName("webhook_id")]
        public Optional<Snowflake> WebhookId { get; init; }

        /// <summary>
        /// Type of <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("type")]
        public MessageType Type { get; init; }

        /// <summary>
        /// Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("activity")]
        public Optional<MessageActivity> Activity { get; init; }

        /// <summary>
        /// Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("application")]
        public Optional<Application> Application { get; init; }

        /// <summary>
        /// If the <see cref="Message"/> is a response to an Interaction,
        /// this is the id of the interaction's application.
        /// </summary>
        [JsonPropertyName("application_id")]
        public Optional<Snowflake> ApplicationId { get; init; }

        /// <summary>
        /// Data showing the source of a crosspost, channel follow add, pin, or reply message.
        /// </summary>
        [JsonPropertyName("message_reference")]
        public Optional<MessageReference> MessageReference { get; init; }

        /// <summary>
        /// Message flags combined as a bitfield.
        /// </summary>
        [JsonPropertyName("flags")]
        public Optional<MessageFlags> Flags { get; init; }

        /// <summary>
        /// The <see cref="Sticker"/>s sent with the <see cref="Message"/>.
        /// </summary>
        [JsonPropertyName("stickers")]
        public Optional<Sticker[]> Stickers { get; init; }

        /// <summary>
        /// The <see cref="Message"/> associated with the <see cref="MessageReference"/>.
        /// </summary>
        [JsonPropertyName("referenced_message")]
        public Optional<Message?> ReferencedMessage { get; init; }

        /// <summary>
        /// Sent if the <see cref="Message"/> is a response to an Interaction.
        /// </summary>
        [JsonPropertyName("interaction")]
        public Optional<MessageInteraction> Interaction { get; init; }

        /// <summary>
        /// The <see cref="ThreadChannel"/> that was started from this <see cref="Message"/>,
        /// includes <see cref="ThreadMember"/>s.
        /// </summary>
        [JsonPropertyName("thread")]
        public Optional<Channel> Thread { get; init; }

        /// <summary>
        /// Sent if the <see cref="Message"/> contains <see cref="Component"/>s like
        /// <see cref="ButtonComponent"/>s, <see cref="ActionRowComponent"/>s, or other
        /// interactive components.
        /// </summary>
        [JsonPropertyName("components")]
        public Optional<Component[]> Components { get; init; }
    }
}
