using System;
using System.Text.Json.Serialization;

namespace Discord.Net.Models
{
    /// <summary>
    ///     Represents a message object.
    /// </summary>
    public record Message
    {
        /// <summary>
        ///     Creates a <see cref="Message"/> with the provided parameters.
        /// </summary>
        /// <param name="id">Id of the message.</param>
        /// <param name="channelId">Id of the channel the message was sent in.</param>
        /// <param name="guildId">Id of the guild the message was sent in.</param>
        /// <param name="author">The author of this message (not guaranteed to be a valid user, see below).</param>
        /// <param name="member">Member properties for this message's author.</param>
        /// <param name="content">Contents of the message.</param>
        /// <param name="timestamp">When this message was sent.</param>
        /// <param name="editedTimestamp">When this message was edited (or null if never).</param>
        /// <param name="tts">Whether this was a TTS message.</param>
        /// <param name="mentionEveryone">Whether this message mentions everyone.</param>
        /// <param name="mentions">Users specifically mentioned in the message.</param>
        /// <param name="mentionRoles">Roles specifically mentioned in this message.</param>
        /// <param name="mentionChannels">Channels specifically mentioned in this message.</param>
        /// <param name="attachments">Any attached files.</param>
        /// <param name="embeds">Any embedded content.</param>
        /// <param name="reactions">Reactions to the message.</param>
        /// <param name="nonce">Used for validating a message was sent.</param>
        /// <param name="pinned">Whether this message is pinned.</param>
        /// <param name="webhookId">If the message is generated by a webhook, this is the webhook's id.</param>
        /// <param name="type">Type of message.</param>
        /// <param name="activity">Sent with Rich Presence-related chat embeds.</param>
        /// <param name="application">Sent with Rich Presence-related chat embeds.</param>
        /// <param name="applicationId">If the message is a response to an Interaction, this is the id of the interaction's application.</param>
        /// <param name="messageReference">Data showing the source of a crosspost, channel follow add, pin, or reply message.</param>
        /// <param name="flags">Message flags combined as a bitfield.</param>
        /// <param name="stickers">The stickers sent with the message (bots currently can only receive messages with stickers, not send).</param>
        /// <param name="referencedMessage">The message associated with the message_reference.</param>
        /// <param name="interaction">Sent if the message is a response to an Interaction.</param>
        /// <param name="thread">The thread that was started from this message, includes thread member object.</param>
        /// <param name="components">Sent if the message contains components like buttons, action rows, or other interactive components.</param>
        [JsonConstructor]
        public Message(Snowflake id, Snowflake channelId, Optional<Snowflake> guildId, User author, Optional<GuildMember> member, string content, DateTimeOffset timestamp, DateTimeOffset? editedTimestamp, bool tts, bool mentionEveryone, UserMention[] mentions, Snowflake[] mentionRoles, Optional<ChannelMention[]> mentionChannels, Attachment[] attachments, Embed[] embeds, Optional<Reaction[]> reactions, Optional<string> nonce, bool pinned, Optional<Snowflake> webhookId, int type, Optional<MessageActivity> activity, Optional<Application> application, Optional<Snowflake> applicationId, Optional<MessageReference> messageReference, Optional<MessageFlags> flags, Optional<Sticker[]> stickers, Optional<Message?> referencedMessage, Optional<MessageInteraction> interaction, Optional<Channel> thread, Optional<Component> components)
        {
            Id = id;
            ChannelId = channelId;
            GuildId = guildId;
            Author = author;
            Member = member;
            Content = content;
            Timestamp = timestamp;
            EditedTimestamp = editedTimestamp;
            Tts = tts;
            MentionEveryone = mentionEveryone;
            Mentions = mentions;
            MentionRoles = mentionRoles;
            MentionChannels = mentionChannels;
            Attachments = attachments;
            Embeds = embeds;
            Reactions = reactions;
            Nonce = nonce;
            Pinned = pinned;
            WebhookId = webhookId;
            Type = type;
            Activity = activity;
            Application = application;
            ApplicationId = applicationId;
            MessageReference = messageReference;
            Flags = flags;
            Stickers = stickers;
            ReferencedMessage = referencedMessage;
            Interaction = interaction;
            Thread = thread;
            Components = components;
        }

        /// <summary>
        ///     Id of the message.
        /// </summary>
        [JsonPropertyName("id")]
        public Snowflake Id { get; }

        /// <summary>
        ///     Id of the channel the message was sent in.
        /// </summary>
        [JsonPropertyName("channel_id")]
        public Snowflake ChannelId { get; }

        /// <summary>
        ///     Id of the guild the message was sent in.
        /// </summary>
        [JsonPropertyName("guild_id")]
        public Optional<Snowflake> GuildId { get; }

        /// <summary>
        ///     The author of this message (not guaranteed to be a valid user, see below).
        /// </summary>
        [JsonPropertyName("author")]
        public User Author { get; }

        /// <summary>
        ///     Member properties for this message's author.
        /// </summary>
        [JsonPropertyName("member")]
        public Optional<GuildMember> Member { get; }

        /// <summary>
        ///     Contents of the message.
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; }

        /// <summary>
        ///     When this message was sent.
        /// </summary>
        [JsonPropertyName("timestamp")]
        public DateTimeOffset Timestamp { get; }

        /// <summary>
        ///     When this message was edited (or null if never).
        /// </summary>
        [JsonPropertyName("edited_timestamp")]
        public DateTimeOffset? EditedTimestamp { get; }

        /// <summary>
        ///     Whether this was a TTS message.
        /// </summary>
        [JsonPropertyName("tts")]
        public bool Tts { get; }

        /// <summary>
        ///     Whether this message mentions everyone.
        /// </summary>
        [JsonPropertyName("mention_everyone")]
        public bool MentionEveryone { get; }

        /// <summary>
        ///     Users specifically mentioned in the message.
        /// </summary>
        [JsonPropertyName("mentions")]
        public UserMention[] Mentions { get; }

        /// <summary>
        ///     Roles specifically mentioned in this message.
        /// </summary>
        [JsonPropertyName("mention_roles")]
        public Snowflake[] MentionRoles { get; }

        /// <summary>
        ///     Channels specifically mentioned in this message.
        /// </summary>
        [JsonPropertyName("mention_channels")]
        public Optional<ChannelMention[]> MentionChannels { get; }

        /// <summary>
        ///     Any attached files.
        /// </summary>
        [JsonPropertyName("attachments")]
        public Attachment[] Attachments { get; }

        /// <summary>
        ///     Any embedded content.
        /// </summary>
        [JsonPropertyName("embeds")]
        public Embed[] Embeds { get; }

        /// <summary>
        ///     Reactions to the message.
        /// </summary>
        [JsonPropertyName("reactions")]
        public Optional<Reaction[]> Reactions { get; }

        /// <summary>
        ///     Used for validating a message was sent.
        /// </summary>
        [JsonPropertyName("nonce")]
        public Optional<string> Nonce { get; }

        /// <summary>
        ///     Whether this message is pinned.
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool Pinned { get; }

        /// <summary>
        ///     If the message is generated by a webhook, this is the webhook's id.
        /// </summary>
        [JsonPropertyName("webhook_id")]
        public Optional<Snowflake> WebhookId { get; }

        /// <summary>
        ///     Type of message.
        /// </summary>
        [JsonPropertyName("type")]
        public int Type { get; }

        /// <summary>
        ///     Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("activity")]
        public Optional<MessageActivity> Activity { get; }

        /// <summary>
        ///     Sent with Rich Presence-related chat embeds.
        /// </summary>
        [JsonPropertyName("application")]
        public Optional<Application> Application { get; }

        /// <summary>
        ///     If the message is a response to an Interaction, this is the id of the interaction's application.
        /// </summary>
        [JsonPropertyName("application_id")]
        public Optional<Snowflake> ApplicationId { get; }

        /// <summary>
        ///     Data showing the source of a crosspost, channel follow add, pin, or reply message.
        /// </summary>
        [JsonPropertyName("message_reference")]
        public Optional<MessageReference> MessageReference { get; }

        /// <summary>
        ///     Message flags combined as a bitfield.
        /// </summary>
        [JsonPropertyName("flags")]
        public Optional<MessageFlags> Flags { get; }

        /// <summary>
        ///     The stickers sent with the message (bots currently can only receive messages with stickers, not send).
        /// </summary>
        [JsonPropertyName("stickers")]
        public Optional<Sticker[]> Stickers { get; }

        /// <summary>
        ///     The message associated with the message_reference.
        /// </summary>
        [JsonPropertyName("referenced_message")]
        public Optional<Message?> ReferencedMessage { get; }

        /// <summary>
        ///     Sent if the message is a response to an Interaction.
        /// </summary>
        [JsonPropertyName("interaction")]
        public Optional<MessageInteraction> Interaction { get; }

        /// <summary>
        ///     The thread that was started from this message, includes thread member object.
        /// </summary>
        [JsonPropertyName("thread")]
        public Optional<Channel> Thread { get; }

        /// <summary>
        ///     Sent if the message contains components like buttons, action rows, or other interactive components.
        /// </summary>
        [JsonPropertyName("components")]
        public Optional<Component> Components { get; }
    }
}
